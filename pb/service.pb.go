// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	FileListResponse
	File
	Empty
	GetFileRequest
	FilePartResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileListResponse struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *FileListResponse) Reset()                    { *m = FileListResponse{} }
func (m *FileListResponse) String() string            { return proto.CompactTextString(m) }
func (*FileListResponse) ProtoMessage()               {}
func (*FileListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileListResponse) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type File struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetFileRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FilePartResponse struct {
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *FilePartResponse) Reset()                    { *m = FilePartResponse{} }
func (m *FilePartResponse) String() string            { return proto.CompactTextString(m) }
func (*FilePartResponse) ProtoMessage()               {}
func (*FilePartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*FileListResponse)(nil), "pb.FileListResponse")
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*GetFileRequest)(nil), "pb.GetFileRequest")
	proto.RegisterType((*FilePartResponse)(nil), "pb.FilePartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Filer service

type FilerClient interface {
	FileList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileListResponse, error)
	GetFileBody(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Filer_GetFileBodyClient, error)
}

type filerClient struct {
	cc *grpc.ClientConn
}

func NewFilerClient(cc *grpc.ClientConn) FilerClient {
	return &filerClient{cc}
}

func (c *filerClient) FileList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileListResponse, error) {
	out := new(FileListResponse)
	err := grpc.Invoke(ctx, "/pb.Filer/FileList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filerClient) GetFileBody(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Filer_GetFileBodyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Filer_serviceDesc.Streams[0], c.cc, "/pb.Filer/GetFileBody", opts...)
	if err != nil {
		return nil, err
	}
	x := &filerGetFileBodyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filer_GetFileBodyClient interface {
	Recv() (*FilePartResponse, error)
	grpc.ClientStream
}

type filerGetFileBodyClient struct {
	grpc.ClientStream
}

func (x *filerGetFileBodyClient) Recv() (*FilePartResponse, error) {
	m := new(FilePartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Filer service

type FilerServer interface {
	FileList(context.Context, *Empty) (*FileListResponse, error)
	GetFileBody(*GetFileRequest, Filer_GetFileBodyServer) error
}

func RegisterFilerServer(s *grpc.Server, srv FilerServer) {
	s.RegisterService(&_Filer_serviceDesc, srv)
}

func _Filer_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilerServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Filer/FileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilerServer).FileList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filer_GetFileBody_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilerServer).GetFileBody(m, &filerGetFileBodyServer{stream})
}

type Filer_GetFileBodyServer interface {
	Send(*FilePartResponse) error
	grpc.ServerStream
}

type filerGetFileBodyServer struct {
	grpc.ServerStream
}

func (x *filerGetFileBodyServer) Send(m *FilePartResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Filer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Filer",
	HandlerType: (*FilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileList",
			Handler:    _Filer_FileList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileBody",
			Handler:       _Filer_GetFileBody_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe2,
	0x12, 0x70, 0xcb, 0xcc, 0x49, 0xf5, 0xc9, 0x2c, 0x2e, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0x92, 0xe3, 0x62, 0x4d, 0x03, 0x8a, 0x15, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b,
	0x71, 0xe8, 0x15, 0x24, 0xe9, 0x81, 0x14, 0x05, 0x41, 0x84, 0x95, 0x24, 0xb8, 0x58, 0x40, 0x5c,
	0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xa2, 0x1c, 0xa0, 0x2a, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x89,
	0x9d, 0x8b, 0xd5, 0x35, 0xb7, 0xa0, 0xa4, 0x52, 0x49, 0x89, 0x8b, 0xcf, 0x3d, 0xb5, 0x04, 0xac,
	0x29, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0x8b, 0x62, 0x35, 0x88, 0xd5, 0x01, 0x89, 0x45, 0x08,
	0xab, 0x85, 0xb8, 0x58, 0x40, 0x76, 0x80, 0x95, 0xf1, 0x04, 0x81, 0xd9, 0x46, 0xc5, 0x5c, 0xac,
	0x20, 0x75, 0x45, 0x42, 0xba, 0x5c, 0x1c, 0x30, 0xb7, 0x0a, 0x71, 0x82, 0x1c, 0x05, 0xb6, 0x4b,
	0x4a, 0x04, 0xe6, 0x3e, 0x64, 0x4f, 0x28, 0x31, 0x08, 0x59, 0x73, 0x71, 0x43, 0xdd, 0xe0, 0x94,
	0x9f, 0x52, 0x29, 0x24, 0x04, 0x52, 0x86, 0xea, 0x28, 0x84, 0x56, 0x64, 0x47, 0x28, 0x31, 0x18,
	0x30, 0x26, 0xb1, 0x81, 0x83, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x45, 0xe0, 0x2e,
	0x33, 0x01, 0x00, 0x00,
}
